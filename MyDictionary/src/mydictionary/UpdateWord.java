/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package mydictionary;

import Exceptions.MeaningException;
import Exceptions.WordException;
import Models.*;
import ObjectInfos.*;
import java.util.ArrayList;

/**
 *
 * @author tangminhtin
 */
public class UpdateWord extends javax.swing.JFrame {

    TypeModel tm;   // Create tm
    MeaningModel mm;    // Create mm
    WordModel wm;   // Create wm
    EnEnDictionary parent;  // Create parent
    int wordID; // Store word id

    /**
     * Creates new form UpdateWord
     *
     * @param parent parent
     * @param mm meaning model
     * @param tm type model
     * @param wm word model
     * @param wordID
     */
    public UpdateWord(EnEnDictionary parent, TypeModel tm, MeaningModel mm, WordModel wm, int wordID) {
        initComponents();
        this.setLocationRelativeTo(null); // Set center frame

        this.tm = tm;   // Set tm
        this.mm = mm;   // Set mm
        this.wm = wm;   // Set wm
        this.parent = parent;  // Set parent
        this.wordID = wordID;   // Set word id

        loadOldWord(); // Reset frame

    }

    /**
     * Load old word
     */
    public void loadOldWord() {
        Word word = wm.searchById(wordID);  // Get word by id
        
        txtWord.setText(word.getText());    // Set word text
        ArrayList<Meaning> listOfMeanings = mm.getMeanings(wordID); // Get meaning by id
        Meaning m = listOfMeanings.get(0);  // Get first meaning  
        txtaMeaning.setText(m.getMeaning());    // Set meaning

        cmbType.removeAll();    // Remove all item of combo box

        ArrayList<String> listOfType = tm.getTypeList(); // Get list of type
        for (String t : listOfType) {
            cmbType.addItem(t); // Add type to combo box
        }

        int typeID = m.getTypeID(); // Get type id
        ObjectInfos.Type type = tm.searchById(typeID); // Get type by search id
        String typeText = type.getText();   // Get type text
        
        cmbType.setSelectedItem(typeText);  // Set selected id
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        lblAddNewWord = new javax.swing.JLabel();
        lblWord = new javax.swing.JLabel();
        lblType = new javax.swing.JLabel();
        lblMeaning = new javax.swing.JLabel();
        txtWord = new javax.swing.JTextField();
        cmbType = new javax.swing.JComboBox<>();
        jScrollPane1 = new javax.swing.JScrollPane();
        txtaMeaning = new javax.swing.JTextArea();
        btnCancel = new javax.swing.JButton();
        btnUpdate = new javax.swing.JButton();

        setTitle("Add New Word");
        setName("frmAddNewWord"); // NOI18N

        lblAddNewWord.setFont(new java.awt.Font("Lucida Grande", 1, 36)); // NOI18N
        lblAddNewWord.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        lblAddNewWord.setText("UPDATE WORD");

        lblWord.setText("Word");

        lblType.setText("Type");

        lblMeaning.setText("Meaning");

        txtaMeaning.setColumns(20);
        txtaMeaning.setRows(5);
        jScrollPane1.setViewportView(txtaMeaning);

        btnCancel.setIcon(new javax.swing.ImageIcon(getClass().getResource("/img/cancel.png"))); // NOI18N
        btnCancel.setText("Cancel");
        btnCancel.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnCancelActionPerformed(evt);
            }
        });

        btnUpdate.setIcon(new javax.swing.ImageIcon(getClass().getResource("/img/add.png"))); // NOI18N
        btnUpdate.setText("Update word");
        btnUpdate.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnUpdateActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                .addGap(0, 0, Short.MAX_VALUE)
                .addComponent(lblAddNewWord, javax.swing.GroupLayout.PREFERRED_SIZE, 466, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(10, 10, 10))
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                .addGap(30, 30, 30)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                    .addComponent(lblMeaning)
                    .addComponent(lblType)
                    .addComponent(lblWord))
                .addGap(18, 18, 18)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(cmbType, 0, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(jScrollPane1)
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                        .addComponent(btnUpdate, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(btnCancel))
                    .addComponent(txtWord, javax.swing.GroupLayout.Alignment.TRAILING))
                .addGap(30, 30, 30))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGap(10, 10, 10)
                .addComponent(lblAddNewWord)
                .addGap(11, 11, 11)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(lblWord)
                    .addComponent(txtWord, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(6, 6, 6)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(lblType)
                    .addComponent(cmbType, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addGap(10, 10, 10)
                        .addComponent(lblMeaning))
                    .addGroup(layout.createSequentialGroup()
                        .addGap(18, 18, 18)
                        .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 116, javax.swing.GroupLayout.PREFERRED_SIZE)))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(btnUpdate)
                    .addComponent(btnCancel))
                .addContainerGap(10, Short.MAX_VALUE))
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    /**
     * Update word
     *
     * @param evt click
     */
    private void btnUpdateActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnUpdateActionPerformed
        try {
            String wordText = txtWord.getText(); // Get new word
            wm.update(wordID, wordText);        // Update word into database

            String typeText = String.valueOf(cmbType.getSelectedItem());    // Get type was selected
            ObjectInfos.Type type = tm.searchByName(typeText);  // Get object type by search
            int typeID = type.getId();  // Get id of type

            String meaning = txtaMeaning.getText(); // Get meaning
            System.out.println(wordID + " - " + typeID);
            System.out.println(meaning);
            mm.update(wordID, typeID, meaning); // Update meaning of new word into database

            this.setVisible(false);     // Hide frame NewWord
            parent.loadDictionary();    // Load dictionary from main frame
            parent.showMeaning(wordText);

        } catch (WordException | MeaningException ex) {
            System.out.println(ex.getMessage()); // Show error
        }

    }//GEN-LAST:event_btnUpdateActionPerformed

    /**
     * Hide frame UpdateWord
     *
     * @param evt click
     */
    private void btnCancelActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnCancelActionPerformed
        this.setVisible(false); // Hide frame
    }//GEN-LAST:event_btnCancelActionPerformed

//    /**
//     * @param args the command line arguments
//     */
//    public static void main(String args[]) {
//        /* Set the Nimbus look and feel */
//        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
//        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
//         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
//         */
//        try {
//            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
//                if ("Nimbus".equals(info.getName())) {
//                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
//                    break;
//                }
//            }
//        } catch (ClassNotFoundException ex) {
//            java.util.logging.Logger.getLogger(NewWord.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
//        } catch (InstantiationException ex) {
//            java.util.logging.Logger.getLogger(NewWord.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
//        } catch (IllegalAccessException ex) {
//            java.util.logging.Logger.getLogger(NewWord.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
//        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
//            java.util.logging.Logger.getLogger(NewWord.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
//        }
//        //</editor-fold>
//
//        /* Create and display the form */
//        java.awt.EventQueue.invokeLater(new Runnable() {
//            public void run() {
//                new UpdateWord().setVisible(true);
//            }
//        });
//    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton btnCancel;
    private javax.swing.JButton btnUpdate;
    private javax.swing.JComboBox<String> cmbType;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JLabel lblAddNewWord;
    private javax.swing.JLabel lblMeaning;
    private javax.swing.JLabel lblType;
    private javax.swing.JLabel lblWord;
    private javax.swing.JTextField txtWord;
    private javax.swing.JTextArea txtaMeaning;
    // End of variables declaration//GEN-END:variables
}
