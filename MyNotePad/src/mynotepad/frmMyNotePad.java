/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package mynotepad;

import java.io.BufferedReader;
import java.io.BufferedWriter;
import java.io.FileNotFoundException;
import java.io.FileReader;
import java.io.FileWriter;
import java.io.IOException;
import java.util.logging.Level;
import java.util.logging.Logger;
import javax.swing.JFileChooser;
import javax.swing.JOptionPane;
import javax.swing.event.DocumentEvent;
import javax.swing.event.DocumentListener;

/**
 *
 * @author tangminhtin CE130438
 */
public class frmMyNotePad extends javax.swing.JFrame {

    private boolean isSaved = false;    // Check status of save file
    private boolean isChanged = false;  // Check status of text area
    private String filePath = "";       // Store path of file
    private final JFileChooser fileChooser = new JFileChooser(); // Create new file chooser

    /**
     * Creates new form frmMyNotePad
     */
    public frmMyNotePad() {
        initComponents();

        mniSaveAs.setEnabled(false);    // Set mniSaveAs disable click
        this.setLocationRelativeTo(null);   // Center frame
        // Set icon for frame
        this.setIconImage(getToolkit().getDefaultToolkit().getImage(getClass().getResource("/img/icon.png")));

        // Tracking status of text area if change or not
        txtaNote.getDocument().addDocumentListener(new DocumentListener() {
            @Override
            public void insertUpdate(DocumentEvent e) {
                isChanged = true;
            }

            @Override
            public void removeUpdate(DocumentEvent e) {
                isChanged = true;
            }

            @Override
            public void changedUpdate(DocumentEvent e) {
                isChanged = true;
            }
        });

    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        spnlNote = new javax.swing.JScrollPane();
        txtaNote = new javax.swing.JTextArea();
        mnbToolBar = new javax.swing.JMenuBar();
        mnuFile = new javax.swing.JMenu();
        mniNew = new javax.swing.JMenuItem();
        mniOpen = new javax.swing.JMenuItem();
        mniSave = new javax.swing.JMenuItem();
        mniSaveAs = new javax.swing.JMenuItem();
        mniExit = new javax.swing.JMenuItem();
        mnuEdit = new javax.swing.JMenu();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);
        setTitle("My NotePad");

        txtaNote.setColumns(20);
        txtaNote.setRows(5);
        spnlNote.setViewportView(txtaNote);

        mnuFile.setMnemonic('f');
        mnuFile.setText("File");

        mniNew.setAccelerator(javax.swing.KeyStroke.getKeyStroke(java.awt.event.KeyEvent.VK_N, java.awt.event.InputEvent.CTRL_MASK));
        mniNew.setIcon(new javax.swing.ImageIcon(getClass().getResource("/img/new.png"))); // NOI18N
        mniNew.setMnemonic('n');
        mniNew.setText("New");
        mniNew.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                mniNewActionPerformed(evt);
            }
        });
        mnuFile.add(mniNew);

        mniOpen.setAccelerator(javax.swing.KeyStroke.getKeyStroke(java.awt.event.KeyEvent.VK_O, java.awt.event.InputEvent.CTRL_MASK));
        mniOpen.setIcon(new javax.swing.ImageIcon(getClass().getResource("/img/open.png"))); // NOI18N
        mniOpen.setMnemonic('o');
        mniOpen.setText("Open");
        mniOpen.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                mniOpenActionPerformed(evt);
            }
        });
        mnuFile.add(mniOpen);

        mniSave.setAccelerator(javax.swing.KeyStroke.getKeyStroke(java.awt.event.KeyEvent.VK_S, java.awt.event.InputEvent.CTRL_MASK));
        mniSave.setIcon(new javax.swing.ImageIcon(getClass().getResource("/img/save.png"))); // NOI18N
        mniSave.setMnemonic('s');
        mniSave.setText("Save");
        mniSave.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                mniSaveActionPerformed(evt);
            }
        });
        mnuFile.add(mniSave);

        mniSaveAs.setAccelerator(javax.swing.KeyStroke.getKeyStroke(java.awt.event.KeyEvent.VK_S, java.awt.event.InputEvent.SHIFT_MASK | java.awt.event.InputEvent.CTRL_MASK));
        mniSaveAs.setIcon(new javax.swing.ImageIcon(getClass().getResource("/img/saveAs.png"))); // NOI18N
        mniSaveAs.setMnemonic('a');
        mniSaveAs.setText("Save As");
        mniSaveAs.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                mniSaveAsActionPerformed(evt);
            }
        });
        mnuFile.add(mniSaveAs);

        mniExit.setAccelerator(javax.swing.KeyStroke.getKeyStroke(java.awt.event.KeyEvent.VK_F4, java.awt.event.InputEvent.ALT_MASK));
        mniExit.setIcon(new javax.swing.ImageIcon(getClass().getResource("/img/exit.png"))); // NOI18N
        mniExit.setMnemonic('x');
        mniExit.setText("Exit");
        mniExit.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                mniExitActionPerformed(evt);
            }
        });
        mnuFile.add(mniExit);

        mnbToolBar.add(mnuFile);

        mnuEdit.setMnemonic('e');
        mnuEdit.setText("Edit");
        mnbToolBar.add(mnuEdit);

        setJMenuBar(mnbToolBar);

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(spnlNote, javax.swing.GroupLayout.DEFAULT_SIZE, 866, Short.MAX_VALUE)
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(spnlNote, javax.swing.GroupLayout.DEFAULT_SIZE, 450, Short.MAX_VALUE)
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    /**
     * Create new file when user clicked
     *
     * @param evt
     */
    private void mniNewActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_mniNewActionPerformed
        // If text area is changed, not save and text area not empty
        if (isChanged && !isSaved && !txtaNote.getText().isEmpty()) {
            newFile();  // Call method to create new file
        } else if (isSaved && isChanged) {
            newFile(); // If file is saved and text area is changed, call method to create new file
        } else {
            // Otherwise set text area is empty 
            txtaNote.setText("");
            isSaved = false;    // Set isSaved is false
            isChanged = false; // Set isChange is false
        }
        // Set disable mniSaveAs
        mniSaveAs.setEnabled(false);
    }//GEN-LAST:event_mniNewActionPerformed

    /**
     * Method to open file when user clicked
     *
     * @param evt
     */
    private void mniOpenActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_mniOpenActionPerformed
        // If text is change and not empty
        if (isChanged && !txtaNote.getText().isEmpty()) {
            openFile(evt);  // Call method to open file
        } else if (isSaved || filePath.isEmpty()) {
            openFile(); // If file is saved or path not empty, open file
        } else {
            openFile1(); // Otherwise call method to open file
        }
    }//GEN-LAST:event_mniOpenActionPerformed

    /**
     * Method to save file when user clicked
     *
     * @param evt
     */
    private void mniSaveActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_mniSaveActionPerformed
        // If file is save, and then save with the same name of file
        if (isSaved) {
            isSaved = true;
            // If file path is empty then open to get path of file
            if (filePath.isEmpty()) {
                filePath = fileChooser.getSelectedFile().getAbsolutePath();
            }
            saveFile(filePath); // Call method to save file
            isChanged = false;  // Set change is false
            mniSaveAs.setEnabled(true); // Set enable mniSaveAs for user click
        } else {
            // Open file chooser for user choose file
            int chooser = fileChooser.showSaveDialog(this);
            if (chooser == JFileChooser.APPROVE_OPTION) {
                isSaved = true; // Set isSave is true
                isChanged = false;  // Set isChange is false

                // Get path of file when user choosen file
                filePath = fileChooser.getSelectedFile().getAbsolutePath();
                saveFile(filePath); // Call method to save file
                // Set enable mniSaveAs
                mniSaveAs.setEnabled(true);
            }
        }
    }//GEN-LAST:event_mniSaveActionPerformed

    /**
     * Method will save as file when user clicked
     *
     * @param evt
     */
    private void mniSaveAsActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_mniSaveAsActionPerformed
        if (isSaved) {  // If file is save
            // Open save file dialog
            int chooser = fileChooser.showSaveDialog(this);
            if (chooser == JFileChooser.APPROVE_OPTION) {
                isSaved = true; // Set isSaved is true
                // Get path of file when user choosen file
                filePath = fileChooser.getSelectedFile().getAbsolutePath();
                saveFile(filePath); // Change method to save file
                isChanged = false;  // Set isChanged is false
            }
        }
    }//GEN-LAST:event_mniSaveAsActionPerformed

    /**
     * Method to exit program when user clicked
     *
     * @param evt
     */
    private void mniExitActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_mniExitActionPerformed
        // If file is save and not change then exit
        if (isSaved && !isChanged) {
            System.exit(0);
        }
        exit(evt);  // Call method to exit program
    }//GEN-LAST:event_mniExitActionPerformed

    /**
     * Main program
     *
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(frmMyNotePad.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(frmMyNotePad.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(frmMyNotePad.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(frmMyNotePad.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new frmMyNotePad().setVisible(true);
            }
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JMenuBar mnbToolBar;
    private javax.swing.JMenuItem mniExit;
    private javax.swing.JMenuItem mniNew;
    private javax.swing.JMenuItem mniOpen;
    private javax.swing.JMenuItem mniSave;
    private javax.swing.JMenuItem mniSaveAs;
    private javax.swing.JMenu mnuEdit;
    private javax.swing.JMenu mnuFile;
    private javax.swing.JScrollPane spnlNote;
    private javax.swing.JTextArea txtaNote;
    // End of variables declaration//GEN-END:variables

    /**
     * Method will save file with path of file
     *
     * @param path
     */
    private void saveFile(String path) {
        try {
            // Create new bw to write file
            BufferedWriter bw = new BufferedWriter(new FileWriter(path));
            bw.write(txtaNote.getText());   // Write text of text area to file
            bw.close(); // Close file to save file into HDD
        } catch (IOException ex) {
            // Show error
            Logger.getLogger(frmMyNotePad.class.getName()).log(Level.SEVERE, null, ex);
        }
    }

    /**
     * Method will open file
     *
     * @param filePath
     * @throws FileNotFoundException
     * @throws IOException
     */
    private void openFile(String filePath) throws FileNotFoundException, IOException {
        // Get path of the file when user choosen
        filePath = fileChooser.getSelectedFile().getAbsolutePath();
        try {
            // Create new br to read file
            BufferedReader br = new BufferedReader(new FileReader(filePath));
            String tmp; // Read line in file
            String content = "";    // Store content of file

            while ((tmp = br.readLine()) != null) {
                content += tmp + "\n"; // Store line of text in file
            }
            txtaNote.setText(content.trim());   // Set text area
            br.close(); // Close file
        } catch (FileNotFoundException ex) {    // Show error
            Logger.getLogger(frmMyNotePad.class.getName()).log(Level.SEVERE, null, ex);
        } catch (IOException ex) {      // Show error
            Logger.getLogger(frmMyNotePad.class.getName()).log(Level.SEVERE, null, ex);
        }
    }

    /**
     * Method to create new file
     */
    private void newFile() {
        // Show confirm dialog for user choose
        int choice = JOptionPane.showConfirmDialog(this, "Do you want to save before create new file?", "Save file", JOptionPane.YES_NO_CANCEL_OPTION);
        if (choice == 0) {   // If yes, then show save dialog to save file
            int chooser = fileChooser.showSaveDialog(this);
            if (chooser == JFileChooser.APPROVE_OPTION) {
                isSaved = true; // Set isSave is true
                // Get path of the file when user choosen
                filePath = fileChooser.getSelectedFile().getAbsolutePath();
                saveFile(filePath); // Call method to save file
                txtaNote.setText("");   // Set empty to text area
                isChanged = false;  // Set isChange is false
            }
        } else if (choice == 1) {   // If no, then set empty to text area
            txtaNote.setText("");
            isSaved = false;    // Set isSave is false
        }
    }

    /**
     * Method to open file with event
     *
     * @param evt
     */
    private void openFile(java.awt.event.ActionEvent evt) {
        // Show comfirm dialog
        int choice = JOptionPane.showConfirmDialog(this, "Do you want to save before open new file?", "Save file", JOptionPane.YES_NO_CANCEL_OPTION);
        if (choice == 0) { // If user choose yes
            mniSaveActionPerformed(evt);    // Call method to save file
            isSaved = true;     // Set isSave is true
            mniSaveAs.setEnabled(true); // Set enable mniSaveAs
            // Show open dialog to open file
            int chooser = fileChooser.showOpenDialog(this);
            if (chooser == JFileChooser.APPROVE_OPTION) {
                try {
                    filePath = fileChooser.getSelectedFile().getAbsolutePath();
                    openFile(filePath); // Call method to open file
                } catch (IOException ex) {  // Show error
                    Logger.getLogger(frmMyNotePad.class.getName()).log(Level.SEVERE, null, ex);
                }
            }
            isChanged = false;  // Set isChange is false
        } else if (choice == 1) { // if user choose no
            try {
                // Show open dialog
                int chooser = fileChooser.showOpenDialog(this);
                if (chooser == JFileChooser.APPROVE_OPTION) {
                    filePath = fileChooser.getSelectedFile().getAbsolutePath();
                    openFile(filePath); // call method to open file
                    isChanged = false;  // Set isChanged is false
                }
            } catch (IOException ex) { // Show error
                Logger.getLogger(frmMyNotePad.class.getName()).log(Level.SEVERE, null, ex);
            }
        }
    }

    /**
     * Method to open file
     */
    private void openFile() {
        int chooser = fileChooser.showOpenDialog(this); // Show open dialog
        if (chooser == JFileChooser.APPROVE_OPTION) {
            isSaved = true; // Set isSaved is true
            try {
                // Get path of the file when user choosen
                filePath = fileChooser.getSelectedFile().getAbsolutePath();
                openFile(filePath); // Call method to open file
            } catch (IOException ex) {
                Logger.getLogger(frmMyNotePad.class.getName()).log(Level.SEVERE, null, ex);
            }
            isChanged = false;  // Set isChanged is false
            mniSaveAs.setEnabled(true); // Set enable mniSaveAs
        }
    }

    /**
     * Method to open file
     */
    private void openFile1() {
        int chooser = fileChooser.showOpenDialog(this); // Show open dialog
        if (chooser == JFileChooser.APPROVE_OPTION) {
            try {
                // Get path of the file when user choosen
                filePath = fileChooser.getSelectedFile().getAbsolutePath();
                openFile(filePath); // Call method to open file
            } catch (IOException ex) {  // Show error
                Logger.getLogger(frmMyNotePad.class.getName()).log(Level.SEVERE, null, ex);
            }
            isChanged = false;  // Set isChanged is false
            isSaved = false;    // Set isSaved is false
            mniSaveAs.setEnabled(true); // Set enable miniSaveAs
        }
    }

    /**
     * Method will exit program
     *
     * @param evt
     */
    private void exit(java.awt.event.ActionEvent evt) {
        // If file is change and text area not empty
        if (isChanged && !txtaNote.getText().isEmpty()) {
            // Show confirm dialog
            int choice = JOptionPane.showConfirmDialog(this, "Do you want to save before exit", "Save file", JOptionPane.YES_NO_CANCEL_OPTION);
            if (choice == 0) { // If yes
                mniSaveActionPerformed(evt);    // Call method to save file
                System.exit(0); // Exit program
            } else if (choice == 1) {
                System.exit(0); // Exit program
            }
        } else { // Otherwise
            System.exit(0); // Exit program
        }
    }

}
